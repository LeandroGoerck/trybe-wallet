{"version":3,"sources":["actions/index.js","components/Loginbutton.jsx","components/LoginInput.jsx","components/Title.jsx","pages/Login.js","components/Form.jsx","components/Header.jsx","components/WalletTable.jsx","pages/Wallet.js","routes/index.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["updateForm","payload","type","ECONO_URL","calcTotalExpense","dispatch","getState","a","state","calcLines","wallet","expenses","map","expense","expentValue","Number","value","changeDescription","exchangeRates","currency","name","exchangeRate","ask","totalSum","reduce","acc","cur","total","Loginbutton","this","props","addEmail","email","buttonDisable","history","className","disabled","onClick","push","Component","connect","userInfo","Logininput","testID","placeholder","id","handleChange","enableCheckIcon","htmlFor","charAt","toUpperCase","slice","data-testid","onChange","event","Title","style","fontFamily","Login","password","enableEmail","enablePassword","bind","checkInput","validateCheck","target","setState","test","length","src","alt","React","methodOptions","tagOptions","Form","method","tag","description","currencies","getCurrencies","clearInput","buttonSelectedLine","fetch","then","response","json","data","USDT","currencyOptions","Object","keys","selectedLine","optionsArray","option","index","key","addExpense","editExpenseLine","renderOptions","aria-label","expenseObj","addExchangeRates","ACT","requestExchangeRates","fetchExchangeRates","changeLine","Header","user","displayTotal","Math","round","WalletTable","delExpenseLine","selectLine","exp","exchangeDesc","split","exchangeAsk","convertedValue","toFixed","lineIndex","Wallet","Routes","exact","path","component","App","Boolean","window","location","hostname","match","INIT","enableButton","action","filter","_exp","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ebe20b50.chunk.js","sourcesContent":["// Coloque aqui suas actions\n// actions/index\n// actions\nexport const ADD_EMAIL = 'ADD_EMAIL';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\nexport const GET_CURRENCIES = 'GET_CURRENCIES';\nexport const REQUEST_EXCHANGE_RATES = 'REQUEST_EXCHANGE_RATES';\nexport const ADD_EXCHANGE_RATES = 'ADD_EXCHANGE_RATES';\nexport const ADD_TOTAL_VALUE = 'ADD_TOTAL_VALUE';\nexport const DEL_EXPENSE_LINE = 'DEL_EXPENSE_LINE';\nexport const CHANGE_LINE = 'CHANGE_LINE';\nexport const SELECT_LINE = 'SELECT_LINE';\nexport const UPDATE_FORM = 'UPDATE_FORM';\n\n// action creators\nexport const addEmail = (email) => ({ type: ADD_EMAIL, payload: email });\nexport const getCurrencies = () => ({ type: GET_CURRENCIES });\nexport const requestExchangeRates = () => ({ type: REQUEST_EXCHANGE_RATES });\nexport const addExchangeRates = (payload) => ({ type: ADD_EXCHANGE_RATES, payload });\nexport const addTotalValue = (payload) => ({ type: ADD_TOTAL_VALUE, payload });\nexport const delExpenseLine = (payload) => ({ type: DEL_EXPENSE_LINE, payload });\nexport const changeLine = (payload, index) => ({ type: CHANGE_LINE, payload, index });\nexport const selectLine = (payload) => ({ type: SELECT_LINE, payload });\nexport const updateForm = (payload) => ({ type: UPDATE_FORM, payload });\n\nconst ECONO_URL = 'https://economia.awesomeapi.com.br/json/all';\n\n// action creator que retorna uma função, possível por conta do pacote redux-thunk\nexport const calcTotalExpense = () => async (dispatch, getState) => {\n  const state = getState();\n  const calcLines = state.wallet.expenses.map((expense) => {\n    const expentValue = Number(expense.value);\n    const changeDescription = expense.exchangeRates[expense.currency].name;\n    const exchangeRate = Number(expense.exchangeRates[expense.currency].ask);\n    const calcValue = expentValue * exchangeRate;\n    const viewLine = [expentValue, changeDescription, exchangeRate, calcValue];\n    // console.log(viewLine);\n    return viewLine;\n  });\n  const totalSum = calcLines.reduce((acc, cur) => (acc + cur[3]), 0);\n  calcLines.total = totalSum;\n  // console.log({ calcLines });\n  // console.log({ calcLines });\n  return dispatch(addTotalValue(totalSum));\n};\n\nexport function addExpense(payload) {\n  return (dispatch) => { // thunk declarado\n    dispatch(requestExchangeRates());\n    return fetch(ECONO_URL)\n      .then((response) => response.json())\n      .then((data) => {\n        const { id, value, currency, method, tag, description } = payload;\n        const dataObj = {\n          id,\n          value,\n          description,\n          currency,\n          method,\n          tag,\n          exchangeRates: data,\n        };\n        dispatch(addExchangeRates(dataObj));\n        dispatch(calcTotalExpense());\n      });\n  };\n}\n\n// action creator que retorna uma função, possível por conta do pacote redux-thunk\nexport function fetchExchangeRates() {\n  return (dispatch) => { // thunk declarado\n    dispatch(requestExchangeRates());\n    return fetch(ECONO_URL)\n      .then((response) => response.json())\n      .then((data) => (data));\n  };\n}\n\nexport function editExpenseLine(payload) {\n  return (dispatch, getState) => { // thunk declarado\n    const { selectedLine } = getState().wallet;\n    dispatch(requestExchangeRates());\n    return fetch(ECONO_URL)\n      .then((response) => response.json())\n      .then((data) => {\n        const { id, value, currency, method, tag, description } = payload;\n        const dataObj = {\n          id,\n          value,\n          description,\n          currency,\n          method,\n          tag,\n          exchangeRates: data,\n        };\n        dispatch(changeLine(dataObj, selectedLine));\n        dispatch(calcTotalExpense());\n      });\n  };\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as ACT from '../actions';\n\nclass Loginbutton extends Component {\n  render() {\n    const { addEmail, email, buttonDisable, history } = this.props;\n    return (\n      <div className=\"flex items-center justify-between\">\n        <button\n          className={\n            buttonDisable\n              ? `bg-green-500 text-white font-bold py-2 px-4 rounded opacity-50\n              cursor-not-allowed`\n              : 'bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded'\n          }\n          type=\"button\"\n          disabled={ buttonDisable }\n          onClick={ () => {\n            addEmail(email);\n            history.push('/carteira');\n          } }\n        >\n          Entrar\n        </button>\n      </div>\n    );\n  }\n}\n\n// const mapStateToProps = (state) => (state);\nconst mapDispatchToProps = (dispatch) => ({\n  addEmail: (userInfo) => dispatch(ACT.addEmail(userInfo)),\n});\n\nLoginbutton.propTypes = {\n  buttonDisable: PropTypes.bool.isRequired,\n  addEmail: PropTypes.func.isRequired,\n  email: PropTypes.string.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Loginbutton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { AiFillCheckCircle } from 'react-icons/ai';\n\nclass Logininput extends Component {\n  render() {\n    const { testID, type, placeholder, id, value, handleChange, enableCheckIcon,\n    } = this.props;\n    return (\n      <div className=\"max-w-xs relative\">\n        <div className=\"mb-4\">\n          <label\n            className=\"block text-gray-700 text-sm font-bold mb-2\"\n            htmlFor={ id }\n          >\n            { type.charAt(0).toUpperCase() + type.slice(1) }\n          </label>\n          <input\n            className=\"shadow appearance-none border rounded w-80 py-2\n            px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            data-testid={ testID }\n            type={ type }\n            placeholder={ placeholder }\n            id={ id }\n            value={ value }\n            onChange={ (event) => handleChange(event) }\n          />\n        </div>\n        <AiFillCheckCircle\n          className={ enableCheckIcon\n            ? 'absolute top-10 right-2 z-10 text-green-500'\n            : 'absolute top-10 right-2 z-10 text-red-500 opacity-50' }\n        />\n      </div>\n    );\n  }\n}\n\nLogininput.propTypes = {\n  testID: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  enableCheckIcon: PropTypes.bool.isRequired,\n};\n\nexport default Logininput;\n","import React, { Component } from 'react';\n\nclass Title extends Component {\n  render() {\n    return (\n      <div\n        className=\"absolute top-12 left-44 text-5xl\"\n        style={ { fontFamily: '\"Alegreya Sans SC\", sans-serif' } }\n      >\n        <span className=\"text-green-600\">T</span>\n        <span>rybe </span>\n        <span className=\"text-yellow-400\">W</span>\n        <span>allet</span>\n      </div>\n    );\n  }\n}\n\nexport default Title;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Loginbutton from '../components/Loginbutton';\nimport Logininput from '../components/LoginInput';\nimport Title from '../components/Title';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: '',\n      password: '',\n      buttonDisable: true,\n      enableEmail: false,\n      enablePassword: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.checkInput = this.checkInput.bind(this);\n    this.validateCheck = this.validateCheck.bind(this);\n  }\n\n  handleChange(event) {\n    const { value, id } = event.target;\n    this.setState({ [id]: value }, () => this.checkInput());\n  }\n\n  validateCheck() {\n    const validation = /\\S+@\\S+\\.\\S+/;\n    const MIN = 6;\n    const { email, password } = this.state;\n    if (validation.test(email)) {\n      this.setState({ enableEmail: true });\n    } else {\n      this.setState({ enableEmail: false });\n    }\n\n    if (MIN <= password.length) {\n      this.setState({ enablePassword: true });\n    } else {\n      this.setState({ enablePassword: false });\n    }\n  }\n\n  checkInput() {\n    const { email, password } = this.state;\n    const validation = /\\S+@\\S+\\.\\S+/;\n    const MIN = 6;\n    if (validation.test(email) && MIN <= password.length) {\n      this.setState({ buttonDisable: false });\n    } else {\n      this.setState({ buttonDisable: true });\n    }\n    this.validateCheck();\n  }\n\n  render() {\n    const { buttonDisable, email, password, enableEmail, enablePassword } = this.state;\n    const { history } = this.props;\n    return (\n      <div className=\"h-full w-full flex flex-col items-center justify-center\">\n        <div\n          className=\"flex flex-row items-center justify-evenly border pl-24 shadow-2xl\n          relative\"\n        >\n          <Title />\n          <form\n            className=\"bg-white shadow-2xl rounded px-12 pt-6 pb-8 mb-4 mr-28 flex\n              flex-col items-center\"\n          >\n            <Logininput\n              testID=\"email-input\"\n              type=\"email\"\n              placeholder=\"alguem@alguem.com\"\n              id=\"email\"\n              value={ email }\n              handleChange={ this.handleChange }\n              enableCheckIcon={ enableEmail }\n            />\n            <Logininput\n              testID=\"password-input\"\n              type=\"password\"\n              placeholder=\"*******\"\n              id=\"password\"\n              value={ password }\n              handleChange={ this.handleChange }\n              enableCheckIcon={ enablePassword }\n            />\n            <Loginbutton\n              email={ email }\n              buttonDisable={ buttonDisable }\n              history={ history }\n            />\n          </form>\n          <img\n            src=\"https://image.freepik.com/free-vector/savings-background-design_1270-10.jpg\"\n            alt=\"wallet\"\n          />\n        </div>\n      </div>\n\n    );\n  }\n}\n\nLogin.propTypes = {\n  // bbuttonDisable: PropTypes.bool.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default Login;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { GiPayMoney } from 'react-icons/gi';\nimport { connect } from 'react-redux';\nimport * as ACT from '../actions';\n\nconst methodOptions = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\nconst tagOptions = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: 0,\n      value: '',\n      currency: '',\n      method: methodOptions[0],\n      tag: tagOptions[0],\n      description: '',\n      exchangeRates: {},\n      currencies: [],\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.getCurrencies = this.getCurrencies.bind(this);\n    this.clearInput = this.clearInput.bind(this);\n    this.buttonSelectedLine = this.buttonSelectedLine.bind(this);\n  }\n\n  componentDidMount() {\n    this.getCurrencies();\n  }\n\n  componentDidUpdate() {\n    const { buttonSelectedLine } = this;\n    const { wallet, updateForm } = this.props;\n    if (wallet.updateForm === true) {\n      buttonSelectedLine();\n      updateForm(false);\n    }\n  }\n\n  getCurrencies() {\n    fetch('https://economia.awesomeapi.com.br/json/all')\n      .then((response) => response.json())\n      .then((data) => {\n        delete data.USDT;\n        const currencyOptions = Object.keys(data);\n        this.setState({ currencies: currencyOptions, currency: currencyOptions[0] });\n      });\n  }\n\n  buttonSelectedLine() {\n    const { wallet } = this.props;\n    const { selectedLine } = wallet;\n\n    if (selectedLine >= 0) {\n      this.setState({\n        id: wallet.expenses[selectedLine].id,\n        value: wallet.expenses[selectedLine].value,\n        currency: wallet.expenses[selectedLine].currency,\n        method: wallet.expenses[selectedLine].method,\n        tag: wallet.expenses[selectedLine].tag,\n        description: wallet.expenses[selectedLine].description,\n      });\n    }\n  }\n\n  clearInput() {\n    const { currencies } = this.state;\n    this.setState({\n      value: '',\n      currency: currencies[0],\n      method: methodOptions[0],\n      tag: tagOptions[0],\n      description: '',\n      exchangeRates: {},\n    });\n  }\n\n  handleChange(event) {\n    const { value, id } = event.target;\n    this.setState({ [id]: value });\n  }\n\n  renderOptions(optionsArray) {\n    return (optionsArray.map((option, index) => (\n      <option key={ index } value={ option }>\n        {option}\n      </option>\n    )));\n  }\n\n  render() {\n    const { id, value, currency, method, tag, description, currencies,\n      exchangeRates } = this.state;\n    const { wallet, addExpense, editExpenseLine } = this.props;\n    const { clearInput, renderOptions } = this;\n    const { selectedLine } = wallet;\n\n    return (\n      <div\n        className={ selectedLine >= 0\n          ? `h-20 bg-yellow-100 border-b-green-500 flex flex-row shadow-xl\n          items-center space-x-5 `\n          : `h-20 bg-white border-b-green-500 flex flex-row shadow-xl\n          items-center space-x-5` }\n      >\n        <form\n          className=\"w-full flex flex-row justify-evenly\"\n        >\n          <span\n            className=\"pl-6 pr-6 text-yellow-500 font-bold \"\n          >\n            <GiPayMoney className=\"h-12 w-12\" />\n          </span>\n\n          <label\n            className=\"block text-gray-500 font-bold md:text-right mb-1 md:mb-0\n            flex flex-row\"\n            htmlFor=\"value\"\n          >\n            <input\n              className=\"bg-gray-200 appearance-none border-2 border-gray-200\n                rounded w-full py-2 px-4 text-gray-700 leading-tight\n                focus:outline-none focus:bg-white focus:border-green-500\"\n              placeholder=\"valor\"\n              data-testid=\"value-input\"\n              type=\"number\"\n              id=\"value\"\n              value={ value }\n              onChange={ this.handleChange }\n            />\n          </label>\n\n          <label\n            className=\"block text-gray-500 font-bold md:text-right mb-1 md:mb-0\n            flex flex-row\"\n            htmlFor=\"description\"\n          >\n            <span\n              className=\"pr-6\"\n            />\n            <input\n              className=\"bg-gray-200 appearance-none border-2 border-gray-200\n                rounded w-full py-2 px-4 text-gray-700 leading-tight\n                focus:outline-none focus:bg-white focus:border-green-500\"\n              placeholder=\"descrição\"\n              data-testid=\"description-input\"\n              type=\"text\"\n              id=\"description\"\n              value={ description }\n              onChange={ this.handleChange }\n            />\n          </label>\n\n          <select\n            className=\"form-select appearance-none block px-3 py-1.5\n            text-base font-normal text-gray-700 bg-white bg-clip-padding bg-no-repeat\n            border border-solid border-gray-300 rounded transition ease-in-out\n            pr-8 ml-8\n            focus:text-gray-700 focus:bg-white focus:border-green-600\n            focus:outline-none\"\n            aria-label=\"moeda\"\n            data-testid=\"currency-input\"\n            id=\"currency\"\n            value={ currency }\n            onChange={ this.handleChange }\n          >\n            {renderOptions(currencies)}\n          </select>\n\n          <select\n            className=\"form-select appearance-none block px-3 py-1.5\n            text-base font-normal text-gray-700 bg-white bg-clip-padding bg-no-repeat\n            border border-solid border-gray-300 rounded transition ease-in-out\n            pr-8 ml-8\n            focus:text-gray-700 focus:bg-white focus:border-green-600\n            focus:outline-none\"\n            aria-label=\"Metodo Pagamento\"\n            data-testid=\"method-input\"\n            id=\"method\"\n            value={ method }\n            onChange={ this.handleChange }\n          >\n            {renderOptions(methodOptions)}\n\n          </select>\n\n          <select\n            className=\"form-select appearance-none block px-3 py-1.5\n            text-base font-normal text-gray-700 bg-white bg-clip-padding bg-no-repeat\n            border border-solid border-gray-300 rounded transition ease-in-out\n            pr-8 ml-8\n            focus:text-gray-700 focus:bg-white focus:border-green-600\n            focus:outline-none\"\n            aria-label=\"Categoria\"\n            data-testid=\"tag-input\"\n            id=\"tag\"\n            value={ tag }\n            onChange={ this.handleChange }\n          >\n            {renderOptions(tagOptions)}\n          </select>\n\n          <button\n            className={ selectedLine >= 0\n              ? `h-min-10  bg-yellow-500  text-black rounded  opacity-80\n              hover:opacity-100 pr-2 pl-2 ml-4 mr-2`\n              : `h-min-10  bg-green-500  text-black rounded  opacity-80\n              hover:opacity-100 pr-2 pl-2 ml-4 mr-2` }\n            type=\"button\"\n            onClick={ () => {\n              const expenseObj = {\n                id,\n                value,\n                currency,\n                method,\n                tag,\n                description,\n                exchangeRates,\n              };\n              if (selectedLine >= 0) {\n                editExpenseLine(expenseObj);\n              } else {\n                addExpense(expenseObj);\n              }\n              this.setState({ value: '' });\n              clearInput();\n            } }\n          >\n            {selectedLine >= 0 ? 'Editar despesa' : 'Adicionar despesa'}\n          </button>\n\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => state;\n\nconst mapDispatchToProps = (dispatch) => ({\n  addExpense: (payload) => dispatch(ACT.addExpense(payload)),\n  requestExchangeRates: () => dispatch(ACT.requestExchangeRates()),\n  fetchExchangeRates: (payload) => dispatch(ACT.fetchExchangeRates(payload)),\n  editExpenseLine: (payload) => dispatch(ACT.editExpenseLine(payload)),\n  updateForm: (payload) => dispatch(ACT.updateForm(payload)),\n});\n\nForm.propTypes = {\n  addExpense: PropTypes.func.isRequired,\n  editExpenseLine: PropTypes.func.isRequired,\n  updateForm: PropTypes.func.isRequired,\n  wallet: PropTypes.shape({\n    expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n    selectedLine: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    updateForm: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as ACT from '../actions';\n\nclass Header extends Component {\n  componentDidMount() {\n    const { calcTotalExpense } = this.props;\n    calcTotalExpense();\n  }\n\n  render() {\n    const { user } = this.props;\n    const { email } = user;\n    const { wallet } = this.props;\n    const { total = '187.12' } = wallet;\n    const displayTotal = Math.round(Number(total) * 100) / 100;\n    return (\n      <div\n        className=\"h-20 bg-white-200 border-b-green-500 flex flex-row border\n        items-center space-x-5 place-content-between mt-10\"\n      >\n        <div\n          className=\"text-4xl m-4 ml-8\"\n          style={ { fontFamily: '\"Alegreya Sans SC\", sans-serif' } }\n        >\n          <span className=\"text-green-600\">T</span>\n          <span>rybe </span>\n          <span className=\"text-yellow-400\">W</span>\n          <span>allet</span>\n        </div>\n        <div>\n          <span\n            data-testid=\"email-field\"\n            className=\"p-10 text-yellow-400\"\n          >\n            {email}\n          </span>\n          <span className=\"text-green-500 mr-2\">\n            Despesa total: R$\n          </span>\n          <span data-testid=\"total-field\" className=\"text-green-500 mr-1\">\n            {displayTotal}\n          </span>\n          <span data-testid=\"header-currency-field\" className=\"text-green-500 mr-8\">\n            BRL\n          </span>\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => (state);\n\nconst mapDispatchToProps = (dispatch) => ({\n  calcTotalExpense: () => dispatch(ACT.calcTotalExpense()),\n});\n\nHeader.propTypes = {\n  user: PropTypes.shape({\n    email: PropTypes.string.isRequired,\n  }).isRequired,\n  wallet: PropTypes.shape({\n    total: PropTypes.number.isRequired,\n  }).isRequired,\n  calcTotalExpense: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { MdDelete } from 'react-icons/md';\nimport { AiFillEdit } from 'react-icons/ai';\nimport * as ACT from '../actions';\n\nclass WalletTable extends React.Component {\n  render() {\n    const { wallet, delExpenseLine, calcTotalExpense, selectLine, updateForm } = this.props;\n    const { expenses, selectedLine } = wallet;\n    return (\n      <table className=\"table-auto border-collapse\">\n        <tr>\n          <th className=\"px-4 py-2 border-b border-slate-300\">Descrição</th>\n          <th className=\"px-4 py-2 border-b border-slate-300\">Tag</th>\n          <th className=\"px-4 py-2 border-b border-slate-300\">\n            Método de pagamento\n          </th>\n          <th className=\"px-4 py-2 border-b border-slate-300\">Valor</th>\n          <th className=\"px-4 py-2 border-b border-slate-300\">Moeda</th>\n          <th className=\"px-4 py-2 border-b border-slate-300\">\n            Câmbio utilizado\n          </th>\n          <th className=\"px-4 py-2 border-b border-slate-300\">\n            Valor convertido\n          </th>\n          <th className=\"px-4 py-2 border-b border-slate-300\">\n            Moeda de conversão\n          </th>\n          <th className=\"px-4 py-2 border-b border-slate-300\">\n            Editar/Excluir\n          </th>\n        </tr>\n        {expenses.length > 0\n        && expenses.map((exp, index) => {\n          const exchangeDesc = exp.exchangeRates[exp.currency].name.split('/');\n          const exchangeAsk = Number(exp.exchangeRates[exp.currency].ask);\n          const convertedValue = Number(exp.value) * exchangeAsk;\n          return (\n            <tbody key={ exp.id } className=\"text-center\">\n              <tr className={ selectedLine === index ? 'bg-yellow-100' : '' }>\n                <td className=\"border-b border-slate-300\">\n                  {exp.description}\n                </td>\n                <td className=\"border-b border-slate-300\">{exp.tag}</td>\n                <td className=\"border-b border-slate-300\">{exp.method}</td>\n                <td className=\"border-b border-slate-300\">{exp.value}</td>\n                <td className=\"border-b border-slate-300\">\n                  {exchangeDesc[0]}\n                </td>\n                <td className=\"border-b border-slate-300\">{exchangeAsk.toFixed(2)}</td>\n                <td className=\"border-b border-slate-300\">{convertedValue.toFixed(2)}</td>\n                <td className=\"border-b border-slate-300\">Real</td>\n                <td className=\"border-b border-slate-300\">\n                  <button\n                    className=\"bg-yellow-500 font-bold py-2 px-4 rounded\n                    opacity-50 hover:opacity-100\"\n                    data-testid=\"edit-btn\"\n                    onClick={ () => {\n                      selectLine(index);\n                      updateForm(true);\n                    } }\n                    type=\"button\"\n                  >\n                    <AiFillEdit\n                      className=\"text-white\"\n                    />\n                  </button>\n                  <button\n                    className=\"bg-red-500 text-white font-bold py-2 px-4 rounded\n                    opacity-50 hover:opacity-100 ml-4 \"\n                    data-testid=\"delete-btn\"\n                    onClick={ () => {\n                      delExpenseLine(index);\n                      calcTotalExpense();\n                    } }\n                    type=\"button\"\n                  >\n                    <MdDelete\n                      className=\"text-white\"\n                    />\n                  </button>\n                </td>\n              </tr>\n            </tbody>\n          );\n        })}\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => state;\n\nconst mapDispatchToProps = (dispatch) => ({\n  delExpenseLine: (payload) => dispatch(ACT.delExpenseLine(payload)),\n  calcTotalExpense: () => dispatch(ACT.calcTotalExpense()),\n  selectLine: (lineIndex) => dispatch(ACT.selectLine(lineIndex)),\n  updateForm: (payload) => dispatch(ACT.updateForm(payload)),\n});\n\nWalletTable.propTypes = {\n  wallet: PropTypes.shape({\n    total: PropTypes.number.isRequired,\n    expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n    selectedLine: PropTypes.number.isRequired,\n  }).isRequired,\n  delExpenseLine: PropTypes.func.isRequired,\n  calcTotalExpense: PropTypes.func.isRequired,\n  selectLine: PropTypes.func.isRequired,\n  updateForm: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletTable);\n","import React from 'react';\nimport Form from '../components/Form';\nimport Header from '../components/Header';\nimport WalletTable from '../components/WalletTable';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <Form />\n        <WalletTable />\n      </div>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from '../pages/Login';\nimport Wallet from '../pages/Wallet';\n\nclass Routes extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route exact path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    );\n  }\n}\n\nexport default Routes;\n","import React from 'react';\nimport Routes from './routes';\n\nfunction App() {\n  return <Routes />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\n// reducers/user\n\nimport * as ACT from '../actions';\n\nconst INIT = {\n  email: '',\n  enableButton: false,\n};\n\n// user reducer\nconst user = (state = INIT, action) => {\n  switch (action.type) {\n  case ACT.ADD_EMAIL:\n    return { ...state, email: action.payload };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\n// reducers/wallet\n// import { response } from '../tests/mockData';\nimport * as ACT from '../actions';\n\nconst INIT = {\n  expenses: [],\n  total: 0,\n};\n\n// const INIT = {\n//   expenses: [\n//     {\n//       id: 0,\n//       value: '10',\n//       currency: 'USD',\n//       method: 'Cartão de crédito',\n//       tag: 'Lazer',\n//       description: 'Dez dólares',\n//       exchangeRates: response,\n//     },\n//     {\n//       id: 1,\n//       value: '20',\n//       currency: 'EUR',\n//       method: 'Dinheiro',\n//       tag: 'Trabalho',\n//       description: 'Vinte euros',\n//       exchangeRates: response,\n//     },\n//   ],\n//   total: 0,\n// };\n\n// wallet reducer\nconst wallet = (state = INIT, action) => {\n  const { payload } = action;\n  switch (action.type) {\n  case ACT.REQUEST_EXCHANGE_RATES:\n    return state;\n\n  case ACT.ADD_EXCHANGE_RATES:\n    return ({ ...state,\n      expenses: [\n        ...state.expenses, {\n          ...payload,\n          id: state.expenses.length,\n        },\n      ],\n    });\n\n  case ACT.ADD_TOTAL_VALUE:\n    state.total = Number(payload);\n    return { ...state };\n\n  case ACT.DEL_EXPENSE_LINE:\n    return ({ ...state,\n      expenses: [\n        ...state.expenses.filter((_exp, index) => (index !== payload)),\n      ],\n    });\n\n  case ACT.SELECT_LINE:\n    state.selectedLine = Number(payload);\n    return { ...state };\n\n  case ACT.CHANGE_LINE:\n    state.expenses[action.index] = payload;\n    state.selectedLine = -1;\n    return { ...state };\n\n  case ACT.UPDATE_FORM:\n    state.updateForm = payload;\n    return { ...state };\n\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","// import user from './user';\n// import wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n// reducers/index\n\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}